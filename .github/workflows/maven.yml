# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    # Services required for testing
    services:
      # Redis service
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B compile --file pom.xml
      
    - name: Run unit tests
      run: mvn -B test --file pom.xml
      
    - name: Start server in background
      run: |
        mvn exec:java &
        echo "SERVER_PID=$!" >> $GITHUB_ENV
        sleep 10
        
    - name: Test HTTP interfaces with curl
      run: |
        echo "Testing Hello endpoint"
        response=$(curl -s -w "%{http_code}" http://localhost:8080/hello -o /tmp/hello_response)
        echo "HTTP Status Code: $response"
        if [ "$response" -eq 200 ]; then
          echo "Hello endpoint test passed"
        else
          echo "Hello endpoint test failed"
          cat /tmp/hello_response
          exit 1
        fi
        
        echo "Testing Cache PUT endpoint"
        response=$(curl -s -w "%{http_code}" -X PUT http://localhost:8080/cache/testkey/testvalue -o /tmp/put_response)
        echo "HTTP Status Code: $response"
        if [ "$response" -eq 200 ]; then
          echo "Cache PUT endpoint test passed"
        else
          echo "Cache PUT endpoint test failed"
          cat /tmp/put_response
          exit 1
        fi
        
        echo "Testing Cache GET endpoint"
        response=$(curl -s -w "%{http_code}" http://localhost:8080/cache/testkey -o /tmp/get_response)
        echo "HTTP Status Code: $response"
        if [ "$response" -eq 200 ]; then
          echo "Cache GET endpoint test passed"
          echo "Response body: $(cat /tmp/get_response)"
        else
          echo "Cache GET endpoint test failed"
          cat /tmp/get_response
          exit 1
        fi
        
        echo "Testing POST endpoint"
        response=$(curl -s -w "%{http_code}" -X POST http://localhost:8080/post/testparam \
                  -H "Content-Type: application/json" \
                  -d '{"field1":"value1","field2":123}' -o /tmp/post_response)
        echo "HTTP Status Code: $response"
        if [ "$response" -eq 200 ]; then
          echo "POST endpoint test passed"
        else
          echo "POST endpoint test failed"
          cat /tmp/post_response
          exit 1
        fi
        
    - name: Stop server
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID
        fi
      if: always()
      
    - name: Run JMH Benchmark
      run: |
        mvn clean compile test-compile exec:java -Dexec.mainClass="com.example.CacheBenchmark" -Dexec.classpathScope=test
      
    - name: Package application
      run: mvn -B package --file pom.xml -DskipTests
